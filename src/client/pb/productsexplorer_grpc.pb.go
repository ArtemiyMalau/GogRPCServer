// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: products_explorer/productsexplorer/productsexplorer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductsExplorerClient is the client API for ProductsExplorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsExplorerClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (ProductsExplorer_FetchClient, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type productsExplorerClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsExplorerClient(cc grpc.ClientConnInterface) ProductsExplorerClient {
	return &productsExplorerClient{cc}
}

func (c *productsExplorerClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (ProductsExplorer_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductsExplorer_ServiceDesc.Streams[0], "/api.ProductsExplorer/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &productsExplorerFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductsExplorer_FetchClient interface {
	Recv() (*FetchResponse, error)
	grpc.ClientStream
}

type productsExplorerFetchClient struct {
	grpc.ClientStream
}

func (x *productsExplorerFetchClient) Recv() (*FetchResponse, error) {
	m := new(FetchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productsExplorerClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/api.ProductsExplorer/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsExplorerServer is the server API for ProductsExplorer service.
// All implementations must embed UnimplementedProductsExplorerServer
// for forward compatibility
type ProductsExplorerServer interface {
	Fetch(*FetchRequest, ProductsExplorer_FetchServer) error
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedProductsExplorerServer()
}

// UnimplementedProductsExplorerServer must be embedded to have forward compatible implementations.
type UnimplementedProductsExplorerServer struct {
}

func (UnimplementedProductsExplorerServer) Fetch(*FetchRequest, ProductsExplorer_FetchServer) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedProductsExplorerServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProductsExplorerServer) mustEmbedUnimplementedProductsExplorerServer() {}

// UnsafeProductsExplorerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsExplorerServer will
// result in compilation errors.
type UnsafeProductsExplorerServer interface {
	mustEmbedUnimplementedProductsExplorerServer()
}

func RegisterProductsExplorerServer(s grpc.ServiceRegistrar, srv ProductsExplorerServer) {
	s.RegisterService(&ProductsExplorer_ServiceDesc, srv)
}

func _ProductsExplorer_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductsExplorerServer).Fetch(m, &productsExplorerFetchServer{stream})
}

type ProductsExplorer_FetchServer interface {
	Send(*FetchResponse) error
	grpc.ServerStream
}

type productsExplorerFetchServer struct {
	grpc.ServerStream
}

func (x *productsExplorerFetchServer) Send(m *FetchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductsExplorer_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsExplorerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProductsExplorer/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsExplorerServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductsExplorer_ServiceDesc is the grpc.ServiceDesc for ProductsExplorer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsExplorer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ProductsExplorer",
	HandlerType: (*ProductsExplorerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ProductsExplorer_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _ProductsExplorer_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "products_explorer/productsexplorer/productsexplorer.proto",
}
